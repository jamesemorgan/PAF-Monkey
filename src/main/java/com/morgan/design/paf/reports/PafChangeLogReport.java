package com.morgan.design.paf.reports;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.lowagie.text.Anchor;
import com.lowagie.text.Chapter;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Section;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.morgan.design.paf.domain.PafChangeLog;

public class PafChangeLogReport implements Report {

	private final Logger logger = LoggerFactory.getLogger(PafChangeLogReport.class);

	private PafChangeLogReport() {
		//
	}

	private static PafChangeLogReport INSTANCE = new PafChangeLogReport();

	public static PafChangeLogReport getInstance() {
		if (null == INSTANCE) {
			INSTANCE = new PafChangeLogReport();
		}
		return INSTANCE;
	}

	@Override
	public void generate(final PafChangeLog log) {
		final Document document = new Document();
		try {
			PdfWriter.getInstance(document, new FileOutputStream(generateTitle(log)));
			addDocumentMetaData(document);
			document.open();
			addChangeLogTable(log, document);
			addClosingComment(document);
			document.close();
		}
		catch (final FileNotFoundException e) {
			// TODO deal with errors
			this.logger.error("FileNotFoundException : ", e);
		}
		catch (final DocumentException e) {
			// TODO deal with errors
			this.logger.error("DocumentException : ", e);
		}
	}

	private static void addChangeLogTable(final PafChangeLog changeLog, final Document document) throws DocumentException {
		final Anchor anchor = new Anchor("Paf Change Log Report", Styles.catFont);
		anchor.setName("Paf Change Log");

		final Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		// Add Run Time Paragraphs
		final Paragraph subPara = new Paragraph("Run Time", Styles.subFont);
		final Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Start : " + changeLog.getStartDate()));
		subCatPart.add(new Paragraph("End : " + changeLog.getStartDate()));

		addEmptyLine(subPara, 2);

		final Paragraph resultsPara = new Paragraph("Results", Styles.subFont);
		final Section resultsCatPart = catPart.addSection(resultsPara);

		addEmptyLine(resultsPara, 2);

		// Create Change Log Table
		final PdfPTable table = new PdfPTable(2);
		table.addCell(createHeaderCell("Field"));
		table.addCell(createHeaderCell("Changed"));

		populateCell(table, "BuildNames", changeLog.getBuildNames());
		populateCell(table, "Localities", changeLog.getLocalities());
		populateCell(table, "MailSort", changeLog.getMailSort());
		populateCell(table, "Organisations", changeLog.getOrganisations());
		populateCell(table, "PafAddress", changeLog.getPafAddress());
		populateCell(table, "SubBuildingName", changeLog.getSubBuildingName());
		populateCell(table, "Thoroughfare", changeLog.getThoroughfare());
		populateCell(table, "ThoroughfareDescriptor", changeLog.getThoroughfareDescriptor());
		populateCell(table, "Udprn", changeLog.getUdprn());

		resultsCatPart.add(table);
		document.add(catPart);
	}

	private static void addClosingComment(final Document document) throws DocumentException {
		final Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), Styles.smallBold));
		addEmptyLine(preface, 1);
		final Anchor anchor = new Anchor("PAF-Monkey - http://www.morgan-design.com", Styles.blueFont);
		anchor.setReference("http://www.morgan-design.com");
		preface.add(anchor);
		document.add(preface);
	}

	private static void addDocumentMetaData(final Document document) {
		document.addTitle("Paf Change Log Report");
		document.addCreator("PAF-Monkey");
	}

	private static void populateCell(final PdfPTable table, final String cell, final int value) {
		final PdfPCell name = new PdfPCell(new Phrase(cell));
		name.setPadding(3f);
		table.addCell(name);

		final PdfPCell valueCell = new PdfPCell(new Phrase(value));
		valueCell.setPadding(3f);
		table.addCell(valueCell);
	}

	private static PdfPCell createHeaderCell(final String value) {
		final PdfPCell c = new PdfPCell(new Phrase(value));
		c.setHorizontalAlignment(Element.ALIGN_CENTER);
		c.setPadding(3f);
		return c;
	}

	private static void addEmptyLine(final Paragraph paragraph, final int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	private String generateTitle(final PafChangeLog log) {
		final SimpleDateFormat dateFormat = new SimpleDateFormat("EEE-d-MMM");
		final String date = dateFormat.format(new Date());
		return "PafChangeLogReport - " + date + ".pdf";
	}
}
